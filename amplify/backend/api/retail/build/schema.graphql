type items {
  id: ID!
  title: String!
  description: String
  tags: [String]
  category: String
  price: Float
  imageKeys: [String]!
  created: AWSTimestamp
  modified: AWSTimestamp
  quantity: Int
  promotions: [AWSJSON]
  media: [AWSJSON]
  labels: [String]
}

type order {
  id: ID!
  items: [AWSJSON]!
  mobileNumber: String!
  created: AWSTimestamp
  modified: AWSTimestamp
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelitemsConnection {
  items: [items]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelitemsFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  category: ModelStringInput
  price: ModelFloatInput
  imageKeys: ModelStringInput
  created: ModelIntInput
  modified: ModelIntInput
  quantity: ModelIntInput
  promotions: ModelStringInput
  media: ModelStringInput
  labels: ModelStringInput
  and: [ModelitemsFilterInput]
  or: [ModelitemsFilterInput]
  not: ModelitemsFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getItems(id: ID!): items
  listItemss(filter: ModelitemsFilterInput, limit: Int, nextToken: String): ModelitemsConnection
  getOrder(id: ID!): order
  listOrders(filter: ModelorderFilterInput, limit: Int, nextToken: String): ModelorderConnection
  searchItemss(filter: SearchableitemsFilterInput, sort: SearchableitemsSortInput, limit: Int, nextToken: String): SearchableitemsConnection
  searchOrders(filter: SearchableorderFilterInput, sort: SearchableorderSortInput, limit: Int, nextToken: String): SearchableorderConnection
}

input CreateItemsInput {
  id: ID
  title: String!
  description: String
  tags: [String]
  category: String
  price: Float
  imageKeys: [String]!
  created: AWSTimestamp
  modified: AWSTimestamp
  quantity: Int
  promotions: [AWSJSON]
  media: [AWSJSON]
  labels: [String]
}

input UpdateItemsInput {
  id: ID!
  title: String
  description: String
  tags: [String]
  category: String
  price: Float
  imageKeys: [String]
  created: AWSTimestamp
  modified: AWSTimestamp
  quantity: Int
  promotions: [AWSJSON]
  media: [AWSJSON]
  labels: [String]
}

input DeleteItemsInput {
  id: ID
}

type Mutation {
  createItems(input: CreateItemsInput!, condition: ModelitemsConditionInput): items
  updateItems(input: UpdateItemsInput!, condition: ModelitemsConditionInput): items
  deleteItems(input: DeleteItemsInput!, condition: ModelitemsConditionInput): items
  createOrder(input: CreateOrderInput!, condition: ModelorderConditionInput): order
  updateOrder(input: UpdateOrderInput!, condition: ModelorderConditionInput): order
  deleteOrder(input: DeleteOrderInput!, condition: ModelorderConditionInput): order
}

input ModelitemsConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  category: ModelStringInput
  price: ModelFloatInput
  imageKeys: ModelStringInput
  created: ModelIntInput
  modified: ModelIntInput
  quantity: ModelIntInput
  promotions: ModelStringInput
  media: ModelStringInput
  labels: ModelStringInput
  and: [ModelitemsConditionInput]
  or: [ModelitemsConditionInput]
  not: ModelitemsConditionInput
}

type Subscription {
  onCreateItems: items @aws_subscribe(mutations: ["createItems"])
  onUpdateItems: items @aws_subscribe(mutations: ["updateItems"])
  onDeleteItems: items @aws_subscribe(mutations: ["deleteItems"])
  onCreateOrder: order @aws_subscribe(mutations: ["createOrder"])
  onUpdateOrder: order @aws_subscribe(mutations: ["updateOrder"])
  onDeleteOrder: order @aws_subscribe(mutations: ["deleteOrder"])
}

type ModelorderConnection {
  items: [order]
  nextToken: String
}

input ModelorderFilterInput {
  id: ModelIDInput
  items: ModelStringInput
  mobileNumber: ModelStringInput
  created: ModelIntInput
  modified: ModelIntInput
  and: [ModelorderFilterInput]
  or: [ModelorderFilterInput]
  not: ModelorderFilterInput
}

input CreateOrderInput {
  id: ID
  items: [AWSJSON]!
  mobileNumber: String!
  created: AWSTimestamp
  modified: AWSTimestamp
}

input UpdateOrderInput {
  id: ID!
  items: [AWSJSON]
  mobileNumber: String
  created: AWSTimestamp
  modified: AWSTimestamp
}

input DeleteOrderInput {
  id: ID
}

input ModelorderConditionInput {
  items: ModelStringInput
  mobileNumber: ModelStringInput
  created: ModelIntInput
  modified: ModelIntInput
  and: [ModelorderConditionInput]
  or: [ModelorderConditionInput]
  not: ModelorderConditionInput
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableitemsFilterInput {
  id: SearchableIDFilterInput
  title: SearchableStringFilterInput
  description: SearchableStringFilterInput
  tags: SearchableStringFilterInput
  category: SearchableStringFilterInput
  price: SearchableFloatFilterInput
  imageKeys: SearchableStringFilterInput
  created: SearchableIntFilterInput
  modified: SearchableIntFilterInput
  quantity: SearchableIntFilterInput
  promotions: SearchableStringFilterInput
  media: SearchableStringFilterInput
  labels: SearchableStringFilterInput
  and: [SearchableitemsFilterInput]
  or: [SearchableitemsFilterInput]
  not: SearchableitemsFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableitemsSortableFields {
  id
  title
  description
  tags
  category
  price
  imageKeys
  created
  modified
  quantity
  promotions
  media
  labels
}

input SearchableitemsSortInput {
  field: SearchableitemsSortableFields
  direction: SearchableSortDirection
}

type SearchableitemsConnection {
  items: [items]
  nextToken: String
  total: Int
}

input SearchableorderFilterInput {
  id: SearchableIDFilterInput
  items: SearchableStringFilterInput
  mobileNumber: SearchableStringFilterInput
  created: SearchableIntFilterInput
  modified: SearchableIntFilterInput
  and: [SearchableorderFilterInput]
  or: [SearchableorderFilterInput]
  not: SearchableorderFilterInput
}

enum SearchableorderSortableFields {
  id
  items
  mobileNumber
  created
  modified
}

input SearchableorderSortInput {
  field: SearchableorderSortableFields
  direction: SearchableSortDirection
}

type SearchableorderConnection {
  items: [order]
  nextToken: String
  total: Int
}
